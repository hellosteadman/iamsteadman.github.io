<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>code.steadman.io</title><link href="http://code.steadman.io/" rel="alternate"></link><link href="http://code.steadman.io/feeds/projects.xml" rel="self"></link><id>http://code.steadman.io/</id><updated>2015-10-24T00:00:00+01:00</updated><entry><title>Category Template</title><link href="http://code.steadman.io/projects/category-template" rel="alternate"></link><updated>2015-10-24T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2015-10-24:projects/category-template</id><summary type="html">&lt;p&gt;This site uses &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to generate a blog from
static files, maintained in a Github repo. (It's configured in s slightly
unusual way so as to remove the &lt;code&gt;.html&lt;/code&gt; extension from the RULs). It's hosted on
Github Pages.&lt;/p&gt;
&lt;p&gt;I wanted each of my categories to have a specific title and description, and the
only way I thought I could do this was by creating category-specific templates,
similar to how WordPress works (and using the same kind of fallbacks we have
for locating templates in Django).&lt;/p&gt;
&lt;p&gt;The plugin mechanism for Pelican is quite simple to get to grips with, and is
based on signals (in much the same way as WordPress plugins are based on
'actions' and 'filters'). Specifying a template for a specific article isn't too
hard, as there's a signal that the plugin can receive, to change the template
for a specific article (falling back to the original template if the
category-specific one can't be found).&lt;/p&gt;
&lt;p&gt;We do that like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;category/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/article&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;article_generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PelicanTemplateNotFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c"&gt;# No category-specific templates exists&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="c"&gt;#Â Use the category-specific template found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem with the listing pages (/blog/, /projects/ etc) is that Pelican
doesn't have a signal to specifically handle the output of this type of page (or
at least, I couldn't find one that fit).&lt;/p&gt;
&lt;p&gt;So I had to monkeypatch the &lt;code&gt;generate_categories&lt;/code&gt; method of the
&lt;code&gt;ArticlesGenerator&lt;/code&gt; class, which is the file that outputs all the HTML for
articles and their listings pages. It will only use the 'articles' template,
and there's no way to override that behaviour in a hookable way.&lt;/p&gt;
&lt;p&gt;Hence the monkeypatching, which is problematic of course because, if this
function gets refactored, this plugin won't work any more. but for now, it's a
working solution.&lt;/p&gt;
&lt;p&gt;The issue I had with monkeypatching is that I wasn't familiar with doing that
with instance methods (functions in a class, rather than standalone ones just
sitting in a module), but a quick bit of Google fu got me what I needed.&lt;/p&gt;
&lt;p&gt;I hook into the &lt;code&gt;generator_init&lt;/code&gt; signal, then replace the built-in
&lt;code&gt;ArticlesGenerator.generate_categories&lt;/code&gt; method with my own, by passing the
new method and the old class to the &lt;code&gt;types.MethodType&lt;/code&gt; function. So my new
monkeypatched version of the method looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Use the category-specific template if it exists&lt;/span&gt;
            &lt;span class="n"&gt;category_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;category/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/index&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PelicanTemplateNotFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Fallback to the &amp;#39;category&amp;#39; template if it doesn&amp;#39;t&lt;/span&gt;
            &lt;span class="n"&gt;category_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# The rest is the same function as originally in Pelican&lt;/span&gt;
        &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What I might do next, time permitting is contribute a signal to the Prelican
project that this plugin can hook into, so no more monkeypatching.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/pelican-category-template"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category></entry><entry><title>Telestrap</title><link href="http://code.steadman.io/projects/telestrap" rel="alternate"></link><updated>2015-04-09T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2015-04-09:projects/telestrap</id><summary type="html">&lt;p&gt;This is a Bootstrap theme with a &lt;a href="http://www.fonts2u.com/teletext-regular-regular.font"&gt;Teletext-style font&lt;/a&gt;,
inspired by the text services we used to get before the Web and digital TV
ruined everything.&lt;/p&gt;
&lt;p&gt;It's pretty much just a novely project, so don't expect much support :)&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/telestrap"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="bootstrap"></category><category term="teletext"></category></entry><entry><title>Django data provisioner</title><link href="http://code.steadman.io/projects/django-data-provisioner" rel="alternate"></link><updated>2014-07-14T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2014-07-14:projects/django-data-provisioner</id><summary type="html">&lt;p&gt;I need to do a bunch of frontend development for a site I'm working on, and I
needed a simple way to generate sample data that is sane.&lt;/p&gt;
&lt;p&gt;So, inspired by &lt;a href="http://ansible.com/"&gt;Ansible&lt;/a&gt; I knocked up a data provisioning
system as a Django management command, that takes a YAML file defining the data
I want to generate.&lt;/p&gt;
&lt;p&gt;It can take data from a JSON resource, likt the Random User API, and turn that
into User objects with Profile objects attached, to carry things like the
profile image, gender, date-of-birth and so on.&lt;/p&gt;
&lt;p&gt;It needn't be used to generate users; that's just the first thing I needed it to
do. It's intelligently nested, so if you need to create a foreign key
relationship, you just nest the two model statements and the management command
figures out the relationship.&lt;/p&gt;
&lt;p&gt;The same goes for linking models via many-to-many relationships, but in reverse.
Here you specify the fieldname you want, and tell the provisioner how many items
you want to use, and whether you want to pick the items starting at a row
number, or just choose them at random. You can also filter and exclude which
items are taken from the database.&lt;/p&gt;
&lt;p&gt;It automatically detects file fields and downloads remote images or picks files
from the filesystem. It does this intelligently, as it knows which model you're referencing, so looks in that app's directory to find the relevant file.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/bambu-gensite"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="ansible"></category></entry><entry><title>Plunja.js</title><link href="http://code.steadman.io/projects/plunjajs" rel="alternate"></link><updated>2014-07-01T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2014-07-01:projects/plunjajs</id><summary type="html">&lt;p&gt;Plunja is a simple JavaScript templating system that takes blocks of HTML stored
in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags and renders them with context objects. It was inspired by
&lt;a href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You donât need a JavaScript framework to use it, as you can define your own
custom locator (ie: a way of finding the template from the DOM). The built-in
locator uses jQuery, but itâs really simple to define your own.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/plunja"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>Format-rules</title><link href="http://code.steadman.io/projects/format-rules" rel="alternate"></link><updated>2014-05-03T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2014-05-03:projects/format-rules</id><summary type="html">&lt;p&gt;In &lt;a href="http://journal.steadman.io/the-designer-blog-post/"&gt;The designer blog post&lt;/a&gt;,
I wrote about updating the blogging app in my toolset to allow easy offline
creation of blog posts. For standard pages I've gone a different direction, with
a library I've started, called formatrules.&lt;/p&gt;
&lt;p&gt;With this Django app - which, for the uninitiated is the Django community's word
for what most people might call a plugin - I've created the ability to define
multi-column layouts in Markdown, without writing any complex HTML. Or any HTML
at all, for that matter. Here's an example of the text of a page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Donec id elit non mi porta gravida at eget metus.
Donec sed odio dui. Nullam id dolor id nibh
ultricies vehicula ut id elit. Praesent commodo
cursus magna, vel scelerisque nisl consectetur et.

// Block of three
Aenean lacinia bibendum nulla sed consectetur.
Maecenas sed diam eget risus varius blandit sit
amet non magna. Cras mattis consectetur purus sit
amet fermentum. Curabitur blandit tempus porttitor.

// Block of three
Cras mattis consectetur purus sit amet fermentum.
Donec ullamcorper nulla non metus auctor fringilla.
Donec id elit non mi porta gravida at eget metus.
Cum sociis natoque penatibus et magnis dis parturient
montes, nascetur ridiculus mus.

// Block of three
Cras justo odio, dapibus ac facilisis in, egestas
eget quam. Nulla vitae elit libero, a pharetra augue.
Donec id elit non mi porta gravida at eget metus.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The text is formatted so that it can be put through the Markdown filter. But
where it gets fun is in those double-slashes. They're not just comments, but
instructions to a filter which reads them and then wraps the proceeding content
in Bootstrap columns. "Block of three" basically means "one third of a page".
I could equally say "block of two", "four", "six" or "twelve". I can even get
cleverer with "two-thirds block" and "half-block". So here's the process the
code runs through:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a regular expression to look for new lines starting with a double-slash
  and an instruction.&lt;/li&gt;
&lt;li&gt;Check whether that instruction matches a given list of regular expressions&lt;/li&gt;
&lt;li&gt;Parse the text, taking everything from just past that // line, to the next
// line (or the end the text if there are no more instructions)&lt;/li&gt;
&lt;li&gt;Pass that parsed text to the function we matched up in the second step&lt;/li&gt;
&lt;li&gt;Replace the parsed text with the result of that function&lt;/li&gt;
&lt;li&gt;Look for the next set of double-slashes
Step three involves a third-party function. Well, it's actually a class, and it
can do a couple of nice things. It can parse the text given to it, and also clean
up after itself. I'll explain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The // comments aren't nested; one instruction is processed after another, so if
there's no need for an explicit "end block" instruction. However, with Bootstrap
you have to create columns inside a "row", so my class knows when its parsing
function is being called for the first time, and it opens a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a class
of &lt;code&gt;row&lt;/code&gt;. The formatrules filter runs the &lt;code&gt;cleanup&lt;/code&gt; function on any class that's
been used during the parsing of the text, so the cleanup function is run on my
class and the "row" element is closed.&lt;/p&gt;
&lt;p&gt;The real-world example - being the only parser I've developed for the
formatrules filter so far - is probably a bit overcomplicated, so let's
simplify.&lt;/p&gt;
&lt;p&gt;What if I wanted a whole block of text to be bold? Rather than surrounding it in
double asterisks in the Markdown way, I could have an instruction like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Bold

All of the rest of this text will be bold.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'd create a class that responds to the regular expression &lt;code&gt;^Bold$&lt;/code&gt;, and add a
function that wraps the proceeding text in a &amp;lt;&lt;code&gt;div&amp;gt;&lt;/code&gt; tag with a &lt;code&gt;style&lt;/code&gt; or
&lt;code&gt;class&lt;/code&gt; attribute. I wouldn't, as that would be ghastly and antisemantic, but
you get the idea.&lt;/p&gt;
&lt;p&gt;Any instructions that followed would override the bold instruction, because I
figure simplicity is better than flexibility when you're dealing with a
web-based text editor.&lt;/p&gt;
&lt;p&gt;As I mentioned, the "block" parser is the only one I've written so far as that's
all I wanted to do, but you get an idea of how useful it is when you see the
layout it produces, with very simplistic - and more-importantly, human
readable - instructions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screen Shot 2013-03-26 at 23.48.15" src="/images/2013/03/presenting-formatrules.png" /&gt;&lt;/p&gt;
&lt;p&gt;I love the uncluttered simplicity that Markdown provides, so I wanted to develop
something that echoed that approach. There are loads of ways this can be
extended and improved and made more flexible for developers - allowing the
classes the parsers produce to be overridden for example - and I've made
developing new parsers pretty simple. However the biggest limitation I've come
across so far is that, because you're wrapping Markdown text in HTML elements,
the Markdown parser - at least the Python one - ignores the paragraphs as it
assumes that whatever is in that box is "raw" HTML, so I'm having to parse the
text inside each "block" with Markdown, then parsing the whole lot through again (obviously the parser then ignores the bits inside HTML tags so it's not exactly
doing the same thing twice). This is inefficient but hey, it's a start.&lt;/p&gt;
&lt;p&gt;If you like the idea, bambu-tools is a set of Django reusable apps that I've
built and use in production environments. It's not well documented right now,
but it's up on &lt;a href="https://pypi.python.org/pypi/bambu-tools"&gt;PyPi&lt;/a&gt; for your
perusal, judgement, comments and suggestions. You'll also &lt;a href="https://bitbucket.org/marksteadman/bambu-tools"&gt;find the code on BitBucket&lt;/a&gt;Â (without some of the
changes in the PyPi version. There's a reason for this, it's just not a good
one).&lt;/p&gt;
&lt;p&gt;If you like the idea, feel free to steal it and build it into your next project.
Just maybe gimme a credit and get in touch if you have any questions.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/bambu-formatrules"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="markdown"></category></entry><entry><title>Droplet Map</title><link href="http://code.steadman.io/projects/droplet-map" rel="alternate"></link><updated>2014-01-23T00:00:00+00:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2014-01-23:projects/droplet-map</id><summary type="html">&lt;p&gt;of things people buy.
Tags: django, twitter, dropletpay&lt;/p&gt;
&lt;p&gt;After seeing a few tweets over the past few months pointing to people's &lt;a href="http://dropletpay.com/"&gt;Droplet&lt;/a&gt; purchases (ala the example below), I thought
I'd map out the kinds of things people buy, and the amounts of money they spend.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I just paid &lt;a href="https://twitter.com/urbancoffeeco"&gt;@urbancoffeeco&lt;/a&gt; Â£1.50 via &lt;a href="https://twitter.com/DropletPay"&gt;@dropletpay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;â Craig Edmunds (@craigtech) &lt;a href="https://twitter.com/craigtech/statuses/347361214860505089"&gt;June 19, 2013&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the uninitiated, Droplet is a way of paying for stuff using your phone. You
charge up your phone with "credit" using your bank card, and you can pay for
stuff simply and easily. I know a couple of the gents who founded the company
who are based in my native Brum, so it's really cool to see the thing begin to
spread.&lt;/p&gt;
&lt;p&gt;So, to the hack. Last night I set about using the Twitter search API to find
tweets mentioning @&lt;a href="http:/twitter.com/dropletpay"&gt;dropletpay&lt;/a&gt;, and matching a
particular pattern ("I just paid [company name or Twitter handle] Â£x via
@dropletpay"). I then parsed the tweet, pulled out the relevant details and
stored them in a database. I then use the Twitter users API to get a bit more
info on each company, like their full name, location, URL and description. The
resulting map looks something like this (it's interactive, so you can click, pan
and zoom):&lt;/p&gt;
&lt;p&gt;(You'll need to read the article in full to see the map)&lt;/p&gt;
&lt;p&gt;The data's really sparse at the moment as tweets drop off the search index after
a week, so I've only got the last few days to play with, but it should update
fairly rapidly so hopefully the leaderboard will start to become a bit more
interesting.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/droplet-map"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Primus</title><link href="http://code.steadman.io/projects/primus" rel="alternate"></link><updated>2013-09-30T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2013-09-30:projects/primus</id><summary type="html">&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customise the header image, background colours and navbar&lt;/li&gt;
&lt;li&gt;Converts WordPress menu classes into Bootstrap classes, rather than fiddle with Bootstrap's CSS&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="http://fortawesome.github.io/Font-Awesome/"&gt;Font Awesome&lt;/a&gt; icons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/primus"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="wordpress"></category><category term="bootstrap"></category></entry><entry><title>Social Comments</title><link href="http://code.steadman.io/projects/social-comments" rel="alternate"></link><updated>2013-06-24T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2013-06-24:projects/social-comments</id><summary type="html">&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install from the Python Package Index:&lt;br /&gt;
&lt;code&gt;pip install socialcomments&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;socialcomments&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt; list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following to your URLconf:&lt;br /&gt;
&lt;code&gt;url(r'^comments/', include('socialcomments.urls'))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;python manage.py syncdb&lt;/code&gt; or &lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SOCIAL_COMMENTS_PROVIDERS&lt;/code&gt; tuple sets out the various providers that can be
used with Social Comments and their respective settings. Currently this project
supports Twitter, Facebook, LinkedIn and a basic name-email-URL combination. The
&lt;code&gt;SOCIAL_COMMENTS_PROVIDERS&lt;/code&gt; setting should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SOCIAL_COMMENTS_PROVIDERS = (
    (
        &amp;#39;socialcomments.providers.twitter.TwitterProvider&amp;#39;, {
            &amp;#39;CONSUMER_KEY&amp;#39;: &amp;#39;&amp;lt;your customer key&amp;gt;&amp;#39;,
            &amp;#39;CONSUMER_SECRET&amp;#39;: &amp;#39;&amp;lt;your consumer secret&amp;gt;&amp;#39;
        }
    ),
    (
        &amp;#39;socialcomments.providers.facebook.FacebookProvider&amp;#39;, {
            &amp;#39;CONSUMER_KEY&amp;#39;: &amp;#39;&amp;lt;your customer key&amp;gt;&amp;#39;,
            &amp;#39;CONSUMER_SECRET&amp;#39;: &amp;#39;&amp;lt;your consumer secret&amp;gt;&amp;#39;
        }
    ),
    (
        &amp;#39;socialcomments.providers.linkedin.LinkedInProvider&amp;#39;, {
            &amp;#39;CONSUMER_KEY&amp;#39;: &amp;#39;&amp;lt;your customer key&amp;gt;&amp;#39;,
            &amp;#39;CONSUMER_SECRET&amp;#39;: &amp;#39;&amp;lt;your consumer secret&amp;gt;&amp;#39;
        }
    )
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Twitter and Facebook you shouldn't need to set a callback URL when creating
your app, but you might need to for LinkedIn. The URL is http://example.com/comments/connect/callback/, where
"example.com" is your domain, and assuming "comments" is the URL stem you've
chosen (you should be able to choose any prefix in your URLconf).&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://github.com/iamsteadman/social-comments"&gt;
    &lt;span class="octicon octicon-git-branch"&gt;&lt;/span&gt;
    Fork it on GitHub
&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category></entry><entry><title>Buffer for WordPress</title><link href="http://code.steadman.io/projects/buffer-for-wordpress" rel="alternate"></link><updated>2012-02-01T00:00:00+00:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2012-02-01:projects/buffer-for-wordpress</id><summary type="html">&lt;p&gt;With this plugin, you can easily add your WordPress posts to Facebook, Twitter
or LinkedIn, via your &lt;a href="http://bufferapp.com"&gt;bufferapp.com&lt;/a&gt; account.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to setup&lt;/li&gt;
&lt;li&gt;Choose which profiles to post to&lt;/li&gt;
&lt;li&gt;Posts are optimised for each social network&lt;/li&gt;
&lt;li&gt;Media attached to posts, to provide better-looking Facebook updates&lt;/li&gt;
&lt;li&gt;Truncated post content is used where there's no title&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="btn" href="https://wordpress.org/plugins/post-to-buffer/"&gt;
    &lt;span class="octicon octicon-cloud-download"&gt;&lt;/span&gt;
    Install it from WordPress
&lt;/a&gt;&lt;/p&gt;</summary><category term="wordpress"></category><category term="buffer"></category></entry><entry><title>WordPress Markdown widget</title><link href="http://code.steadman.io/projects/wordpress-markdown-widget" rel="alternate"></link><updated>2009-10-11T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2009-10-11:projects/wordpress-markdown-widget</id><summary type="html">&lt;p&gt;This plugin allows users familiar with the Markdown syntax to use it from within
the sidebar. Its chief benefit is that it allows users who are unfamiliar with
HTML, to get many of the benefits of a robust markup language, which is easier
to learn and read back.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://wordpress.org/plugins/markdown-widget/"&gt;
    &lt;span class="octicon octicon-cloud-download"&gt;&lt;/span&gt;
    Install it from WordPress
&lt;/a&gt;&lt;/p&gt;</summary><category term="wordpress"></category><category term="php"></category><category term="markdown"></category></entry><entry><title>Weekday redirect</title><link href="http://code.steadman.io/projects/weekday-redirect" rel="alternate"></link><updated>2009-09-19T00:00:00+01:00</updated><author><name>Steadman</name></author><id>tag:code.steadman.io,2009-09-19:projects/weekday-redirect</id><summary type="html">&lt;p&gt;This is a WordPress plugin created to redirect to a given page on a particular
day. Letâs say you want certain information to be available on a certain day,
like a list of events. Users could go to &lt;code&gt;http://yoursite.com/events&lt;/code&gt;, which
would then redirect to &lt;code&gt;http://yoursite.com/events/&amp;lt;day&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;day&amp;gt;&lt;/code&gt; is
obviously âmondayâ, âtuesdayâ etc, depending on what day of the week it is.&lt;/p&gt;
&lt;p&gt;There may already be more elegant solutions to this problem, but I wanted to
build a WordPress plugin from scratch, rather than adapting an existing one. The
much more efficient shortcodes system implemented in WordPres 2.5 (better than
lots of plugins performing a find and replace or regular expression check) makes
this really easy.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn" href="https://wordpress.org/plugins/weekday-redirect/"&gt;
    &lt;span class="octicon octicon-cloud-download"&gt;&lt;/span&gt;
    Install it from WordPress
&lt;/a&gt;&lt;/p&gt;</summary><category term="wordpress"></category><category term="php"></category></entry></feed>